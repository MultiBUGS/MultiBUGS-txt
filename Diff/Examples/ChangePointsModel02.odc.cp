#
#
# This the code for the Change points model, as described in the 
# OpenBUGS differential equation solver documentation; both language 
# and compiled component versions are included. 
#
#
#
#




Model:
model {				
	for (i in 1:n.ind) {										# 6
		for (j in 1:n.grid) {									# 7
			log.data[i, j] ~ dnorm(log.model[i, j], tau)								# 8
			log.model[i, j] <- log(model[i, j])								# 9
			model[i, j] <- c.language[i, j]								# 10
			c.language[i, j] <- a.language[i, j, 1] / V[i]								# 14
			c.hard.wired[i, j] <- a.hard.wired[i, j, 1] / V[i]								# 17
		}									# 18
		theta[i, 1:p] ~ dmnorm(mu[1:p], omega.inv[1:p, 1:p])									# 19
		param[i, 1] <- theta[i, 1]                                                                                                      # 20
		param[i, 2] <- theta[i, 2]                                                                                                      # 21
		param[i, 3] <- theta[i, 3]                                                                                                      # 22
		param[i, p+1] <- dose[i]                                                                                                     # 23
		CL[i] <- exp(theta[i, 1])									# 24
		V[i] <- exp(theta[i, 2])									# 25
		TI[i] <- exp(theta[i, 3])									# 26
		a.language[i, 1:n.grid, 1:dim] <- ode.block(inits[i, 1:2, 1:dim],                                       # 27
				                 grid[1:n.grid], D(A[i, 1:dim], t[i]), origins[i, 1:n.block], tol)							# 28
		a.hard.wired[i, 1:n.grid, 1:dim] <- diff.changepoints(inits[i, 1, 1:dim], 									# 29
				grid[1:n.grid], param[i, 1:(p + 1)], origins[i, 1:n.block], tol)							# 30
		D(A[i, 1], t[i]) <- R31[i] - CL[i] * A[i, 1] / V[i]									# 31
		D(A[i, 2], t[i]) <- 0									# 32
		D(A[i, 3], t[i]) <- -R31[i]									# 33
		R31[i] <- piecewise(vec.R31[i, 1:n.block])									# 34
		vec.R31[i, 1] <- 0									# 35
		vec.R31[i, 2] <- 0									# 36
		vec.R31[i, 3] <- dose[i] / TI[i]									# 37
		vec.R31[i, 4] <- 0									# 38
		inits[i, 1, 1] <- dose[i]									# 39
		inits[i, 1, 2] <- dose[i]									# 40
		inits[i, 1, 3] <- dose[i]									# 41
		inits[i, 2, 1] <- A[i, 2]									# 42
		inits[i, 2, 2] <- -A[i, 2]									# 43
		origins[i, 1] <- 0									# 44
		origins[i, 2] <- second.bolus.time									# 45
		origins[i, 3] <- zo.start.time									# 46
		origins[i, 4] <- zo.start.time + TI[i]									# 47
	}										# 48
	mu[1:p] ~ dmnorm(mu.prior.mean[1:p], mu.prior.prec[1:p, 1:p])										# 49
	omega.inv[1:p, 1:p] ~ dwish(omega.inv.matrix[1:p, 1:p], omega.inv.dof)										# 50
	omega[1:p, 1:p] <- inverse(omega.inv[1:p, 1:p])										# 51
	tau ~ dgamma(0.001, 0.001)										# 52
}											# 53

Data (inference):
list(
p = 3, dim = 3,
tol = 1.0E-6,
n.ind = 10, n.grid = 14, n.block = 4,
grid = c(0.05, 0.1, 0.2, 0.4, 0.6, 1.0, 1.5, 2, 3, 4, 8, 12, 16, 24),
dose = c(100, 95, 90, 85, 80, 75, 70, 65, 60, 55),
second.bolus.time = 2, zo.start.time = 8,
mu.prior.mean = c(1, 2, 0),
mu.prior.prec = structure(
.Data = c(
0.0001, 0, 0,
0, 0.0001, 0,
0, 0, 0.0001),
.Dim = c(3, 3)),
omega.inv.matrix = structure(
.Data = c(
0.03, 0, 0,
0, 0.03, 0,
0, 0, 0.03),
.Dim = c(3, 3)),
omega.inv.dof = 3,
log.data = structure(.Data = c(
2.506806978030932,2.67682296697279,2.332344283466289,2.376797675013539,2.349437440647516,
2.277130759053128,1.901860129713161,3.036587520038876,2.526992373680701,2.190055870390162,
0.4449995864259541,1.353024467696517,-0.5667546851524111,-4.133111399218143,2.390654845171341,
2.36628605709322,2.509243513218112,2.465580984239555,2.221587392910886,2.26140091802353,
2.022032460326893,2.902317217812296,2.826183340878527,2.330718926280069,1.062163350686548,
1.500236604866249,0.322568880365175,-2.181050407630254,2.611914512120249,2.883165921662452,
2.429170613111546,2.215920703420093,2.378618333260171,2.330850077921749,1.9400991031341,
2.997631153082918,2.463878538194495,2.047968734726723,0.04743993646881008,1.284096469794026,
-0.7398765567482091,-4.587268506000238,2.471564694054391,2.55457452585859,2.51053369355437,
2.445601815485881,2.332586545255321,2.27456950478153,1.924626801063482,2.969193779197737,
2.506648460779211,2.222627824352776,0.9672690836791722,1.515413378340901,-0.04569181083533707,
-2.851486982778233,2.539293637668727,2.398059641335746,2.487736938488076,2.417431956872954,
2.260453379438979,2.064163201395757,1.814923115123572,2.863839983473093,2.536987551662465,
1.894732020180357,0.4325342799713265,1.055818719029957,-0.5579776651291811,-3.960966950975292,
2.226371502748412,2.191840043848823,2.279424083468609,2.056444497385586,2.311028713158125,
2.058186176763404,1.827993924087064,2.619010913962962,2.389344703055091,1.970395837627473,
0.2413104161259808,1.072668119978947,-0.6058328166918296,-4.003029763710348,2.236888305958121,
2.135062810482048,2.240221834175653,2.238166789507332,2.051144568424816,2.125714628687647,
1.923572098771534,2.807724904902176,2.401660929411848,1.837296700936244,0.659206626615328,
1.115301201611678,-0.4423792045446207,-3.406416630637941,2.211440120423609,2.23046483176955,
2.018914994730106,2.182643825114167,1.954370939817629,1.871286852494042,1.714155894212324,
2.486776385476569,2.164408419240227,1.834279980037531,0.6084940510417839,1.199197322551877,
-0.1166948465538084,-2.762398711280877,1.875653241701553,2.06996838022167,2.081126541408105,
1.87731746628071,2.05746251568549,1.789223884031489,1.742538619368961,2.58637307440882,
2.113607322799953,2.000086619244659,0.6879108524396829,1.221886907538273,-0.07662892171523605,
-2.38190914914214,1.931313644642539,2.168130198912237,1.893274133179755,1.76215896822434,
1.959281090819101,1.842555355403463,1.315750013216379,2.461529321627873,2.103280029469549,
1.724961667718873,0.2738641523356443,0.7701139508282926,-0.7401336981314417,-3.294012374603819),
.Dim = c(10,14))
)

Initial values:
list(
tau = 100,
mu = c(1, 2, 0),
omega.inv = structure(
.Data = c(
100, 0, 0,
0, 100, 0,
0, 0, 100),
.Dim = c(3, 3)),
theta = structure(
.Data = c(
1, 2, 0,
1, 2, 0,
1, 2, 0,
1, 2, 0,
1, 2, 0,
1, 2, 0,
1, 2, 0,
1, 2, 0,
1, 2, 0,
1, 2, 0),
.Dim = c(10, 3))
)

Data (simulation):
list(
p = 3, dim = 3,
tol = 1.0E-6,
n.ind = 10, n.grid = 14, n.block = 4,
grid = c(0.05, 0.1, 0.2, 0.4, 0.6, 1.0, 1.5, 2, 3, 4, 8, 12, 16, 24),
dose = c(100, 95, 90, 85, 80, 75, 70, 65, 60, 55),
second.bolus.time = 2, zo.start.time = 8,
tau = 100,
mu = c(1, 2, 0),
omega.inv = structure(
.Data = c(
100, 0, 0,
0, 100, 0,
0, 0, 100),
.Dim = c(3, 3))
)

Results:

Summary statistics: 
		mean	sd	MC_error	val2.5pc	median	val97.5pc	start	sample
	mu[1]	0.9576	0.04363	0.001148	0.8696	0.9582	1.042	4000	4001
	mu[2]	1.945	0.03234	8.529E-4	1.881	1.945	2.01	4000	4001
	mu[3]	-0.2682	0.2777	0.02993	-1.019	-0.2235	0.1727	4000	4001
	omega[1,1]	0.01757	0.01017	2.341E-4	0.006371	0.01496	0.04439	4000	4001
	omega[1,2]	-0.003203	0.005082	1.221E-4	-0.01545	-0.002614	0.005394	4000	4001
	omega[1,3]	0.01954	0.02831	0.00215	-0.01231	0.01179	0.09495	4000	4001
	omega[2,1]	-0.003203	0.005082	1.221E-4	-0.01545	-0.002614	0.005394	4000	4001
	omega[2,2]	0.008903	0.00539	1.402E-4	0.003164	0.007473	0.02365	4000	4001
	omega[2,3]	-0.008912	0.01691	9.606E-4	-0.05073	-0.005134	0.01126	4000	4001
	omega[3,1]	0.01954	0.02831	0.00215	-0.01231	0.01179	0.09495	4000	4001
	omega[3,2]	-0.008912	0.01691	9.606E-4	-0.05073	-0.005134	0.01126	4000	4001
	omega[3,3]	0.1052	0.1691	0.01454	0.005594	0.04388	0.5351	4000	4001
	tau	94.82	12.8	0.4174	71.51	94.01	122.4	4000	4001

